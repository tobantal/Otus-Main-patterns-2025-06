cmake_minimum_required(VERSION 3.14)
project(hw-06-adapter VERSION 1.0.0 LANGUAGES CXX)

# Установка стандарта C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Добавление путей для поиска заголовочных файлов
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

# Сбор исходных файлов
file(GLOB_RECURSE SOURCES "src/*.cpp")
file(GLOB_RECURSE HEADERS "include/*.hpp")

# Создание библиотеки
add_library(project_lib ${SOURCES} ${HEADERS})

# Сначала собираем генератор как подпроект
add_subdirectory(adapter-generator)

# Настройка GoogleTest (используем уже настроенный в корневом CMakeLists.txt)
# Включение тестирования
enable_testing()

# Сбор тестовых файлов
file(GLOB_RECURSE TEST_SOURCES "tests/*.cpp")

# Создание исполняемого файла для тестов
add_executable(run_tests ${TEST_SOURCES})

# Линковка с библиотеками
target_link_libraries(run_tests
project_lib
GTest::gtest_main
GTest::gmock_main
)

# Добавление тестов
include(GoogleTest)
gtest_discover_tests(run_tests)

#Демонстрационное приложение (если нужно)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/demo/main.cpp")
add_executable(demo demo/main.cpp)
target_link_libraries(demo project_lib)
endif()

# Функция генерации адаптеров (если нужна)
if(TARGET adapter_generator)
# Можно использовать функцию generate_adapters из adapter-generator
# после того как она будет собрана
endif()

# Вывод информации о конфигурации
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
message(STATUS "CMAKE_CXX_STANDARD: ${CMAKE_CXX_STANDARD}")




# Затем ЗАПУСКАЕМ его для основного приложения
#generate_adapters(hw-06-adapter
#    INPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/examples/interfaces  
#    OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/generated
#)

# Демонстрационное приложение (если есть main.cpp)
#if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/examples/main.cpp)
#    add_executable(demo main.cpp)
 #   target_link_libraries(demo project_lib)
#endif()

