#include <gtest/gtest.h>
#include <memory>
#include <any>
#include <string>
#include <unordered_map>
#include <cmath>

#include "IoC.hpp"
#include "IocContainer.hpp"
#include "Scope.hpp"
#include "DefaultGetterSetterRegistry.hpp"
#include "AdapterRegistry.hpp"
#include "IGameObject.hpp"
#include "IMovable.hpp"
#include "MovableAdapter.hpp"
#include "Vector2D.hpp"

class SimpleGameObject : public IGameObject
{
public:
    void setProperty(const std::string &key, const std::any &value) override
    {
        props_[key] = value;
    }
    std::any getProperty(const std::string &key) const override
    {
        auto it = props_.find(key);
        if (it == props_.end())
            throw std::runtime_error("no prop");
        return it->second;
    }

private:
    std::unordered_map<std::string, std::any> props_;
};

class MovableAdapterIntegrationTest : public ::testing::Test
{
protected:
    std::shared_ptr<SimpleGameObject> obj;
    std::shared_ptr<IMovable> adapter;

    void SetUp() override
    {
        // 1. Создаем и активируем скоуп
        IoC::resolve<ICommand>("Scopes.New", {std::make_shared<std::string>("test")})->execute();
        IoC::resolve<ICommand>("Scopes.Current", {std::make_shared<std::string>("test")})->execute();

        // 2. Регистрируем геттеры/сеттеры и адаптеры
        DefaultGetterSetterRegistry::registerAll();
        AutoGenerated::AdapterRegistry::registerAll();

        obj = std::make_shared<SimpleGameObject>();

        // 3. Разрешаем адаптер
        auto factory = IoC::resolve<
            std::function<std::shared_ptr<IMovable>(std::shared_ptr<IGameObject>)>>("Adapter:IMovable");
        adapter = (*factory)(obj);
    }
};

TEST_F(MovableAdapterIntegrationTest, SetPositionAndGetPosition)
{
    Vector2D p{3, 4};

    adapter->setPosition(p);
    auto stored = std::any_cast<Vector2D>(obj->getProperty("Position"));
    EXPECT_EQ(stored.x, p.x);
    EXPECT_EQ(stored.y, p.y);

    auto got = adapter->getPosition();
    EXPECT_EQ(got.x, p.x);
    EXPECT_EQ(got.y, p.y);
}

TEST_F(MovableAdapterIntegrationTest, GetVelocity_ComputesUsingMovableImplementations)
{
    obj->setProperty("Velocity", 10);
    obj->setProperty("Direction", 1);
    obj->setProperty("DirectionsNumber", 4);

    auto vel = adapter->getVelocity();
    EXPECT_EQ(vel.x, 0);
    EXPECT_EQ(vel.y, 10);
}

TEST_F(MovableAdapterIntegrationTest, GetVelocity_ThrowsOnInvalidParameters)
{
    // invalid directionsNumber
    obj->setProperty("Velocity", 5);
    obj->setProperty("Direction", 0);
    obj->setProperty("DirectionsNumber", 0);
    EXPECT_THROW(adapter->getVelocity(), std::runtime_error);

    // invalid direction index
    obj->setProperty("DirectionsNumber", 4);
    obj->setProperty("Direction", 5);
    EXPECT_THROW(adapter->getVelocity(), std::runtime_error);
}
